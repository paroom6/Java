package Exam;

public class Example01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * 객체지향 4가지 특징
		 * 추상화 상속 다형성 캡슐화 객체각 멤버함수로만 공유
		 * 고객{돈,제품}-돈을 넣고 제품을 선택 돈과 제품을 받음
		 * 자판기{제품,거스름돈}-입력된 돈 받음 받은 돈과 가격비교 제품과 거스름돈 제공
		 * 고객(돈 투입)-자판기(돈 받음)-자판기(받은 돈 판별 후 가격 비교)- 자판기(거스름돈과 제품제공)-고객(돈과 제품 수령) 
		 * 절차지향
		 * 상속불가능,보안성 낮음,모든함수 공유
		 * 고객이 돈을 넣어/ 가격에 맞는 음료와 잔돈 비교/ 출력
		 * 
		 */
		/*
		 * 클래스(class) 
		 * - 일종의 틀, 설계도 이러한 것들을 클래스라고 한다
		 * - 클래스로부터 만들어진 객체를 '인스턴스'라고 한다 
		 * 
		 * 객체지향 프로그래밍 개발단계
		 * 클래스 설계>인스턴스(클래스를 이용한 객체생성)>생성된 객체 사용
		 * 
		 * 객체 간의 관계
		 * 객체는 개별적으로 사용되기도 하며, 다른 객체와의 관계를 가질 수 있다.
		 *
		 * 집합관계: 자동차는 엔진, 타이어, 헨들등으로 구성되므로 자동차와 부품들은 집합관계이다.
		 * 사용관계: 사람과 자동차를 사용하므로 사람과 자동차는 사용관계이다
		 * 상속관계: 기계와 자동차는 상속관계이다.
		 * 
		 * 클래스의 용도
		 * 실행용: 프로그램 실행+> main()메소드를 제공하는 역활을 한다
		 * 라이브러리용(API): 다를 클래스에서 사용할 목적으로 설계
		 * 
		 * 클래스의 구성요소
		 * -필드(멤버변수), 생성자, 메소드
		 * 
		 */
		// Student 클래스의 인스턴스
		Student s1= new Student();
		Student s2= new Student();
		System.out.println(s1.toString());
		System.out.println(s2.toString());
		// 같은 클래스에서 완전히 같게 생성됬지만 서로 독립된 객체
	}

}
